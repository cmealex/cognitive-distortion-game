'''
Cognitive Distortion Game - A therapeutic educational mobile app
Developed using Kivy for Android deployment
'''

import os
import json
import random
import time
import hashlib
import datetime
from functools import partial

# Kivy imports
from kivy.app import App
from kivy.uix.screenmanager import ScreenManager, Screen, SlideTransition
from kivy.uix.boxlayout import BoxLayout
from kivy.uix.gridlayout import GridLayout
from kivy.uix.button import Button
from kivy.uix.label import Label
from kivy.uix.image import Image
from kivy.uix.textinput import TextInput
from kivy.uix.scrollview import ScrollView
from kivy.uix.popup import Popup
from kivy.clock import Clock
from kivy.graphics import Color, Rectangle
from kivy.animation import Animation
from kivy.core.window import Window
from kivy.properties import StringProperty, NumericProperty, ListProperty, ObjectProperty, BooleanProperty
from kivy.network.urlrequest import UrlRequest

# OpenAI API for generating cognitive distortion scenarios TODO
# Note: You'll need to install the requests package
import requests

# Constants
USER1 = "user1" 
PASSWORD1 = "password1" 
ADMIN_USERNAME = "admin"
ADMIN_PASSWORD_HASH = hashlib.sha256("admin123".encode()).hexdigest()  # Default admin password is "admin123"
USER_DATA_FILE = "user_data.json" #TODO
SCORES_FILE = "high_scores.json" #TODO
AVATARS = [f"avatar{i}.png" for i in range(1, 9)]  # Placeholder for avatar filenames #TODO
API_KEY = "YOUR_OPENAI_API_KEY"  # Replace with actual API key #TODO

# Cognitive distortion types
COGNITIVE_DISTORTIONS = [
    "All-or-Nothing Thinking",
    "Overgeneralization",
    "Mental Filter",
    "Disqualifying the Positive",
    "Jumping to Conclusions",
    "Magnification or Minimization",
    "Emotional Reasoning",
    "Should Statements",
    "Labeling",
    "Personalization and Blame"
]

# Example situations for each cognitive distortion (these will be generated by AI in production)
EXAMPLE_SITUATIONS = {
    "All-or-Nothing Thinking": [
        "I got a B on the test, so I'm a complete failure.",
        "If I don't get this job, my career is over.",
        "Since I couldn't finish the marathon, I'm not athletic at all."
    ],
    "Overgeneralization": [
        "The store clerk was rude to me. People are always treating me badly.",
        "I failed my driving test. I never succeed at anything.",
        "My date didn't call me back. No one will ever love me."
    ],
    "Mental Filter": [
        "My boss gave me mostly positive feedback but mentioned one area for improvement. I can't believe how critical she is.",
        "I got compliments on my presentation, but someone yawned. My presentation was boring.",
        "We had a great trip, but it rained one day. The vacation was ruined."
    ],
    "Disqualifying the Positive": [
        "I only got promoted because they needed someone quickly, not because I deserved it.",
        "She's only being nice to me because she feels sorry for me.",
        "I only won because the competition wasn't very strong."
    ],
    "Jumping to Conclusions": [
        "My friend hasn't texted me back in three hours. She must be angry with me.",
        "My manager wants to meet with me tomorrow. I'm definitely getting fired.",
        "That group of people laughed when I walked by. They must be laughing at me."
    ],
    "Magnification or Minimization": [
        "Making this mistake proves I'm completely incompetent.",
        "Getting this award isn't a big deal. Anyone could have done it.",
        "This small setback means my entire project is doomed."
    ],
    "Emotional Reasoning": [
        "I feel anxious about flying, so planes must be dangerous.",
        "I feel like a bad parent, so I must be failing my children.",
        "I feel stupid asking this question, so it must be a dumb question."
    ],
    "Should Statements": [
        "I should be able to handle this stress without feeling overwhelmed.",
        "I must always be productive with my time.",
        "People should always recognize when I need help."
    ],
    "Labeling": [
        "I made a mistake at work. I'm an idiot.",
        "He forgot our lunch date. He's a terrible friend.",
        "I failed the test. I'm a hopeless student."
    ],
    "Personalization and Blame": [
        "My son got a poor grade on his project. I should have helped him more.",
        "The dinner party wasn't lively. It's my fault for not being entertaining enough.",
        "My team lost the game because I missed that shot."
    ]
}

# Utility Functions
def load_user_data():
    """Load user data from JSON file"""
    if os.path.exists(USER_DATA_FILE):
        with open(USER_DATA_FILE, 'r') as f:
            return json.load(f)
    return {"users": {}, "admin": {"username": ADMIN_USERNAME, "password": ADMIN_PASSWORD_HASH}}

def save_user_data(data):
    """Save user data to JSON file"""
    with open(USER_DATA_FILE, 'w') as f:
        json.dump(data, f)

def load_high_scores():
    """Load high scores from JSON file"""
    if os.path.exists(SCORES_FILE):
        with open(SCORES_FILE, 'r') as f:
            return json.load(f)
    return {"global": {str(i): [] for i in range(1, 21)}}

def save_high_scores(data):
    """Save high scores to JSON file"""
    with open(SCORES_FILE, 'w') as f:
        json.dump(data, f)

def hash_password(password):
    """Create SHA-256 hash of password"""
    return hashlib.sha256(password.encode()).hexdigest()

def generate_situation_with_ai(level, distortion_type=None):
    """Generate a situation using OpenAI API based on level difficulty and optionally for a specific distortion type"""
    # Adjust the prompt based on the level (higher levels = more ambiguous situations)
    ambiguity = min(level / 20, 0.9)  # 0.05 (level 1) to 0.9 (level 18+)
    
    if distortion_type:
        prompt = f"""
        Generate a realistic life situation that clearly demonstrates the cognitive distortion: '{distortion_type}'.
        The situation should be concise (30-50 words) and appropriate for therapeutic education.
        Make it {int(ambiguity * 100)}% ambiguous (level {level}).
        """
    else:
        # For random distortion
        distortion_type = random.choice(COGNITIVE_DISTORTIONS)
        prompt = f"""
        Generate a realistic life situation that demonstrates the cognitive distortion: '{distortion_type}'.
        The situation should be concise (30-50 words) and appropriate for therapeutic education.
        Make it {int(ambiguity * 100)}% ambiguous (level {level}).
        """

    try:
        response = requests.post(
            "https://api.openai.com/v1/completions",
            headers={
                "Authorization": f"Bearer {API_KEY}",
                "Content-Type": "application/json"
            },
            json={
                "model": "text-davinci-003",
                "prompt": prompt,
                "max_tokens": 100,
                "temperature": 0.7
            }
        )
        
        if response.status_code == 200:
            situation = response.json()["choices"][0]["text"].strip()
            return {"situation": situation, "distortion": distortion_type}
        else:
            # Fallback to predefined examples if API call fails
            return fallback_generate_situation(distortion_type)
            
    except Exception as e:
        print(f"Error generating situation with AI: {e}")
        # Fallback to predefined examples
        return fallback_generate_situation(distortion_type)

def fallback_generate_situation(distortion_type=None):
    """Fallback to use predefined examples if AI generation fails"""
    if not distortion_type:
        distortion_type = random.choice(COGNITIVE_DISTORTIONS)
    
    situation = random.choice(EXAMPLE_SITUATIONS[distortion_type])
    return {"situation": situation, "distortion": distortion_type}

def analyze_situation_with_ai(situation):
    """Use AI to determine which cognitive distortion best matches a situation"""
    prompt = f"""
    Analyze this situation and identify which of the following cognitive distortions it most likely represents:
    {', '.join(COGNITIVE_DISTORTIONS)}

    Situation: "{situation}"
    
    Return only the name of the cognitive distortion.
    """
    
    try:
        response = requests.post(
            "https://api.openai.com/v1/completions",
            headers={
                "Authorization": f"Bearer {API_KEY}",
                "Content-Type": "application/json"
            },
            json={
                "model": "text-davinci-003",
                "prompt": prompt,
                "max_tokens": 50,
                "temperature": 0.3
            }
        )
        
        if response.status_code == 200:
            distortion = response.json()["choices"][0]["text"].strip()
            # Ensure the returned distortion is in our list
            for valid_distortion in COGNITIVE_DISTORTIONS:
                if valid_distortion.lower() in distortion.lower():
                    return valid_distortion
            
            # If no valid distortion was found, return a random one -- TODO
            return random.choice(COGNITIVE_DISTORTIONS)
        else:
            # Fallback if API call fails
            return random.choice(COGNITIVE_DISTORTIONS)
            
    except Exception as e:
        print(f"Error analyzing situation with AI: {e}")
        # Fallback to random cognitive distortion
        return random.choice(COGNITIVE_DISTORTIONS)

# Screen Classes
class LoginScreen(Screen):
    def __init__(self, **kwargs):
        super(LoginScreen, self).__init__(**kwargs)
        self.layout = BoxLayout(orientation='vertical', padding=[30, 30, 30, 30], spacing=10)
        
        # Add a title
        self.title = Label(
            text='Cognitive Distortion Game',
            font_size='30sp',
            size_hint=(1, 0.2),
            color=(0.2, 0.5, 0.9, 1)  # Blue color
        )
        self.layout.add_widget(self.title)
        
        # Create input fields
        self.username_input = TextInput(
            hint_text='Username',
            multiline=False,
            size_hint=(1, None),
            height=50,
            font_size='18sp'
        )
        self.password_input = TextInput(
            hint_text='Password',
            multiline=False,
            password=True,
            size_hint=(1, None),
            height=50,
            font_size='18sp'
        )
        
        # Create login and admin buttons
        self.login_btn = Button(
            text='Login',
            size_hint=(1, None),
            height=60,
            background_color=(0.2, 0.5, 0.9, 1),  # Blue
            font_size='20sp'
        )
        self.login_btn.bind(on_press=self.login)
        
        self.admin_btn = Button(
            text='Admin',
            size_hint=(1, None),
            height=60,
            background_color=(0.7, 0.7, 0.7, 1),  # Gray
            font_size='20sp'
        )
        self.admin_btn.bind(on_press=self.admin_login)
        
        # Create error message label
        self.error_label = Label(
            text='',
            color=(1, 0, 0, 1),  # Red
            size_hint=(1, None),
            height=30
        )
        
        # Add widgets to layout
        self.layout.add_widget(self.username_input)
        self.layout.add_widget(self.password_input)
        self.layout.add_widget(self.login_btn)
        self.layout.add_widget(self.admin_btn)
        self.layout.add_widget(self.error_label)
        
        # Add layout to screen
        self.add_widget(self.layout)
        
        # Set background color
        with self.canvas.before:
            Color(1, 1, 1, 1)  # White background
            self.rect = Rectangle(size=self.size, pos=self.pos)
        self.bind(size=self._update_rect, pos=self._update_rect)
    
    def _update_rect(self, instance, value):
        self.rect.size = instance.size
        self.rect.pos = instance.pos
    
    def login(self, instance):
        username = self.username_input.text.strip()
        password = self.password_input.text.strip()
        
        if not username or not password:
            self.error_label.text = "Please enter both username and password"
            return
        
        user_data = load_user_data()
        
        if username in user_data["users"] and user_data["users"][username]["password"] == hash_password(password):
            app = App.get_running_app()
            app.current_user = username
            self.manager.transition = SlideTransition(direction="left")
            self.manager.current = "profile"
            self.error_label.text = ""
            self.username_input.text = ""
            self.password_input.text = ""
        else:
            self.error_label.text = "Invalid username or password"
    
    def admin_login(self, instance):
        username = self.username_input.text.strip()
        password = self.password_input.text.strip()
        
        user_data = load_user_data()
        
        if username == user_data["admin"]["username"] and user_data["admin"]["password"] == hash_password(password):
            app = App.get_running_app()
            app.current_user = "admin"
            self.manager.transition = SlideTransition(direction="left")
            self.manager.current = "admin"
            self.error_label.text = ""
            self.username_input.text = ""
            self.password_input.text = ""
        else:
            self.error_label.text = "Invalid admin credentials"

class AdminScreen(Screen):
    def __init__(self, **kwargs):
        super(AdminScreen, self).__init__(**kwargs)
        self.layout = BoxLayout(orientation='vertical', padding=[30, 30, 30, 30], spacing=10)
        
        # Title
        self.title = Label(
            text='Admin Panel',
            font_size='24sp',
            size_hint=(1, 0.1),
            color=(0.2, 0.5, 0.9, 1)  # Blue
        )
        
        # Create user section
        self.create_user_layout = BoxLayout(orientation='vertical', size_hint=(1, 0.4), spacing=10)
        self.create_user_title = Label(
            text='Create New User',
            font_size='18sp',
            size_hint=(1, 0.3),
            halign='left'
        )
        self.create_user_title.bind(size=self.create_user_title.setter('text_size'))
        
        self.new_username = TextInput(
            hint_text='Username',
            multiline=False,
            size_hint=(1, None),
            height=50
        )
        self.new_password = TextInput(
            hint_text='Password',
            multiline=False,
            password=True,
            size_hint=(1, None),
            height=50
        )
        self.create_user_btn = Button(
            text='Create User',
            size_hint=(1, None),
            height=50,
            background_color=(0.2, 0.5, 0.9, 1)  # Blue
        )
        self.create_user_btn.bind(on_press=self.create_user)
        
        self.user_message = Label(
            text='',
            size_hint=(1, 0.3),
            color=(0, 0.7, 0, 1)  # Green
        )
        
        self.create_user_layout.add_widget(self.create_user_title)
        self.create_user_layout.add_widget(self.new_username)
        self.create_user_layout.add_widget(self.new_password)
        self.create_user_layout.add_widget(self.create_user_btn)
        self.create_user_layout.add_widget(self.user_message)
        
        # User list section
        self.user_list_layout = BoxLayout(orientation='vertical', size_hint=(1, 0.4), spacing=10)
        self.user_list_title = Label(
            text='Existing Users',
            font_size='18sp',
            size_hint=(1, 0.2),
            halign='left'
        )
        self.user_list_title.bind(size=self.user_list_title.setter('text_size'))
        
        # Scroll view for user list
        self.scroll_view = ScrollView(size_hint=(1, 0.8))
        self.users_grid = GridLayout(cols=1, spacing=5, size_hint_y=None)
        self.users_grid.bind(minimum_height=self.users_grid.setter('height'))
        self.scroll_view.add_widget(self.users_grid)
        
        self.user_list_layout.add_widget(self.user_list_title)
        self.user_list_layout.add_widget(self.scroll_view)
        
        # Navigation section
        self.nav_layout = BoxLayout(orientation='horizontal', size_hint=(1, 0.1), spacing=10)
        self.logout_btn = Button(
            text='Logout',
            size_hint=(0.5, 1),
            background_color=(0.7, 0.7, 0.7, 1)  # Gray
        )
        self.logout_btn.bind(on_press=self.logout)
        
        self.nav_layout.add_widget(self.logout_btn)
        
        # Add all layouts to main layout
        self.layout.add_widget(self.title)
        self.layout.add_widget(self.create_user_layout)
        self.layout.add_widget(self.user_list_layout)
        self.layout.add_widget(self.nav_layout)
        
        # Add layout to screen
        self.add_widget(self.layout)
        
        # Set background color
        with self.canvas.before:
            Color(1, 1, 1, 1)  # White background
            self.rect = Rectangle(size=self.size, pos=self.pos)
        self.bind(size=self._update_rect, pos=self._update_rect)
    
    def _update_rect(self, instance, value):
        self.rect.size = instance.size
        self.rect.pos = instance.pos
    
    def on_enter(self):
        """Update the user list when entering the screen"""
        self.update_user_list()
    
    def update_user_list(self):
        """Update the displayed list of users"""
        self.users_grid.clear_widgets()
        user_data = load_user_data()
        
        if not user_data.get("users"):
            no_users_label = Label(
                text="No users created yet",
                size_hint_y=None,
                height=50
            )
            self.users_grid.add_widget(no_users_label)
            return
        
        for username in user_data["users"]:
            user_item = BoxLayout(
                orientation='horizontal',
                size_hint_y=None,
                height=50,
                spacing=10
            )
            
            username_label = Label(
                text=username,
                size_hint=(0.7, 1),
                halign='left'
            )
            username_label.bind(size=username_label.setter('text_size'))
            
            delete_btn = Button(
                text='Delete',
                size_hint=(0.3, 1),
                background_color=(0.9, 0.2, 0.2, 1)  # Red
            )
            delete_btn.bind(on_press=partial(self.delete_user, username))
            
            user_item.add_widget(username_label)
            user_item.add_widget(delete_btn)
            self.users_grid.add_widget(user_item)
    
    def create_user(self, instance):
        """Create a new user account"""
        username = self.new_username.text.strip()
        password = self.new_password.text.strip()
        
        if not username or not password:
            self.user_message.text = "Please enter both username and password"
            self.user_message.color = (0.9, 0.2, 0.2, 1)  # Red
            return
        
        user_data = load_user_data()
        
        if username in user_data["users"]:
            self.user_message.text = f"Username '{username}' already exists"
            self.user_message.color = (0.9, 0.2, 0.2, 1)  # Red
            return
        
        # Create new user
        user_data["users"][username] = {
            "password": hash_password(password),
            "created_date": datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
            "level_progress": 1,
            "nickname": "",
            "avatar": ""
        }
        
        save_user_data(user_data)
        self.user_message.text = f"User '{username}' created successfully"
        self.user_message.color = (0, 0.7, 0, 1)  # Green
        self.new_username.text = ""
        self.new_password.text = ""
        self.update_user_list()
    
    def delete_user(self, username, instance):
        """Delete a user account"""
        user_data = load_user_data()
        
        if username in user_data["users"]:
            del user_data["users"][username]
            save_user_data(user_data)
            self.user_message.text = f"User '{username}' deleted successfully"
            self.user_message.color = (0, 0.7, 0, 1)  # Green
            self.update_user_list()
    
    def logout(self, instance):
        """Return to login screen"""
        app = App.get_running_app()
        app.current_user = None
        self.manager.transition = SlideTransition(direction="right")
        self.manager.current = "login"

class ProfileScreen(Screen):
    def __init__(self, **kwargs):
        super(ProfileScreen, self).__init__(**kwargs)
        self.layout = BoxLayout(orientation='vertical', padding=[30, 30, 30, 30], spacing=15)
        
        # Title
        self.title = Label(
            text='Choose Your Profile',
            font_size='24sp',
            size_hint=(1, 0.1),
            color=(0.2, 0.5, 0.9, 1)  # Blue
        )
        
        # Nickname section
        self.nickname_layout = BoxLayout(orientation='vertical', size_hint=(1, 0.2), spacing=10)
        self.nickname_label = Label(
            text='Choose a Nickname:',
            font_size='18sp',
            size_hint=(1, 0.3),
            halign='left'
        )
        self.nickname_label.bind(size=self.nickname_label.setter('text_size'))
        
        self.nickname_input = TextInput(
            hint_text='Enter your nickname',
            multiline=False,
            size_hint=(1, None),
            height=50,
            font_size='18sp'
        )
        
        self.nickname_layout.add_widget(self.nickname_label)
        self.nickname_layout.add_widget(self.nickname_input)
        
        # Avatar section
        self.avatar_layout = BoxLayout(orientation='vertical', size_hint=(1, 0.5), spacing=10)
        self.avatar_label = Label(
            text='Choose an Avatar:',
            font_size='18sp',
            size_hint=(1, 0.1),
            halign='left'
        )
        self.avatar_label.bind(size=self.avatar_label.setter('text_size'))
        
        # Grid for avatars
        self.avatar_grid = GridLayout(cols=4, spacing=10, size_hint=(1, 0.9))
        self.selected_avatar = None
        
        for i, avatar in enumerate(AVATARS):
            avatar_btn = Button(background_normal=f'data/images/{avatar}')
            avatar_btn.bind(on_press=partial(self.select_avatar, avatar))
            self.avatar_grid.add_widget(avatar_btn)
        
        self.avatar_layout.add_widget(self.avatar_label)
        self.avatar_layout.add_widget(self.avatar_grid)
        
        # Navigation section
        self.nav_layout = BoxLayout(orientation='horizontal', size_hint=(1, 0.2), spacing=10)
        
        self.back_btn = Button(
            text='Back',
            size_hint=(0.3, 1),
            background_color=(0.7, 0.7, 0.7, 1)  # Gray
        )
        self.back_btn.bind(on_press=self.go_back)
        
        self.continue_btn = Button(
            text='Continue',
            size_hint=(0.7, 1),
            background_color=(0.2, 0.5, 0.9, 1)  # Blue
        )
        self.continue_btn.bind(on_press=self.save_profile)
        
        self.nav_layout.add_widget(self.back_btn)
        self.nav_layout.add_widget(self.continue_btn)
        
        # Error message label
        self.error_label = Label(
            text='',
            color=(1, 0, 0, 1),  # Red
            size_hint=(1, 0.1)
        )
        
        # Add all layouts to main layout
        self.layout.add_widget(self.title)
        self.layout.add_widget(self.nickname_layout)
        self.layout.add_widget(self.avatar_layout)
        self.layout.add_widget(self.error_label)
        self.layout.add_widget(self.nav_layout)
        
        # Add layout to screen
        self.add_widget(self.layout)
        
        # Set background color
        with self.canvas.before:
            Color(1, 1, 1, 1)  # White background
            self.rect = Rectangle(size=self.size, pos=self.pos)
        self.bind(size=self._update_rect, pos=self._update_rect)
    
    def _update_rect(self, instance, value):
        self.rect.size = instance.size
        self.rect.pos = instance.pos
    
    def on_enter(self):
        """Load existing profile data if available"""
        app = App.get_running_app()
        user_data = load_user_data()
        
        if app.current_user in user_data["users"]:
            user = user_data["users"][app.current_user]
            self.nickname_input.text = user.get("nickname", "")
            self.selected_avatar = user.get("avatar", "")
    
    def select_avatar(self, avatar, instance):
        """Handle avatar selection"""
        self.selected_avatar = avatar
        
        # Highlight the selected avatar
        for i, child in enumerate(self.avatar_grid.children):
            if AVATARS[i] == avatar:
                child.background_color = (0.2, 0.5, 0.9, 1)  # Blue highlight
            else:
                child.background_color = (1, 1, 1, 1)  # White
    
    def save_profile(self, instance):
        """Save profile and continue to level selection"""
        nickname = self.nickname_input.text.strip()
        
        if not nickname:
            self.error_label.text = "Please enter a nickname"
            return
        
        if not self.selected_avatar:
            self.error_label.text = "Please select an avatar"
            return
        
        # Save profile data
        app = App.get_running_app()
        user_data = load_user_data()
        
        if app.current_user in user_data["users"]:
            user_data["users"][app.current_user]["nickname"] = nickname
            user_data["users"][app.current_user]["avatar"] = self.selected_avatar
            save_user_data(user_data)
            
            self.error_label.text = ""
            self.manager.transition = SlideTransition(direction="left")
            self.manager.current = "level_select"
    
    def go_back(self, instance):
        """Return to login screen"""
        app = App.get_running_app()
        app.current_user = None
        self.manager.transition = SlideTransition(direction="right")
        self.manager.current = "login"

class LevelSelectScreen(Screen):
    def __init__(self, **kwargs):
        super(LevelSelectScreen, self).__init__(**kwargs)
        self.layout = BoxLayout(orientation='vertical', padding=[20, 20, 20, 20], spacing=10)
        
        # Header with user info
        self.header = BoxLayout(orientation='horizontal', size_hint=(1, 0.15), spacing=10)
        
        self.avatar_img = Image(
            size_hint=(0.2, 1),
            allow_stretch=True, keep_ratio=False
        )
        
        self.user_info = BoxLayout(orientation='vertical', size_hint=(0.6, 1))
        self.nickname_label = Label(
            text='',
            font_size='18sp',
            halign='left',
            valign='middle'
        )
        self.nickname_label.bind(size=self.nickname_label.setter('text_size'))
        
        self.level_label = Label(
            text='',
            font_size='16sp',
            halign='left',
            valign='middle'
        )
        self.level_label.bind(size=self.level_label.setter('text_size'))
        
        self.user_info.add_widget(self.nickname_label)
        self.user_info.add_widget(self.level_label)
        
        self.logout_btn = Button(
            text='Logout',
            size_hint=(0.2, 1),
            background_color=(0.7, 0.7, 0.7, 1)  # Gray
        )
        self.logout_btn.bind(on_press=self.logout)
        
        self.header.add_widget(self.avatar_img)
        self.header.add_widget(self.user_info)
        self.header.add_widget(self.logout_btn)
        
        # Title
        self.title = Label(
            text='Select Level',
            font_size='24sp',
            size_hint=(1, 0.1),
            color=(0.2, 0.5, 0.9, 1)  # Blue
        )
        
        # Level grid - Scroll view for levels
        self.scroll_view = ScrollView(size_hint=(1, 0.65))
        self.level_grid = GridLayout(
            cols=3, 
            spacing=10, 
            size_hint_y=None,
            padding=[10, 10, 10, 10]
        )
        self.level_grid.bind(minimum_height=self.level_grid.setter('height'))
        
        # Populate level buttons (will be updated in on_enter)
        self.scroll_view.add_widget(self.level_grid)
        
        # Bottom navigation
        self.nav_layout = BoxLayout(orientation='horizontal', size_hint=(1, 0.1), spacing=10)
        
        self.play_btn = Button(
            text='Play',
            size_hint=(1, 1),
            background_color=(0.2, 0.5, 0.9, 1)  # Blue
        )
        self.play_btn.bind(on_press=self.start_game)
        
        self.nav_layout.add_widget(self.play_btn)
        
        # Add all layouts to main layout
        self.layout.add_widget(self.header)
        self.layout.add_widget(self.title)
        self.layout.add_widget(self.scroll_view)
        self.layout.add_widget(self.nav_layout)
        
        # Add layout to screen
        self.add_widget(self.layout)
        
        # Set background color
        with self.canvas.before:
            Color(1, 1, 1, 1)  # White background
            self.rect = Rectangle(size=self.size, pos=self.pos)
        self.bind(size=self._update_rect, pos=self._update_rect)
        
        # Selected level
        self.selected_level = None
    
    def _update_rect(self, instance, value):
        self.rect.size = instance.size
        self.rect.pos = instance.pos
    
    def on_enter(self):
        """Update the user profile and available levels"""
        app = App.get_running_app()
        user_data = load_user_data()
        
        if app.current_user in user_data["users"]:
            user = user_data["users"][app.current_user]
            
            # Update user info
            self.nickname_label.text = f"Nickname: {user.get('nickname', '')}"
            max_level = user.get("level_progress", 1)
            self.level_label.text = f"Max Level: {max_level}"
            
            # Set avatar
            avatar = user.get("avatar", "")
            if avatar:
                self.avatar_img.source = f"data/images/{avatar}"
            
            # Clear and update level grid
            self.level_grid.clear_widgets()
            self.selected_level = None
            
            # Add level buttons
            for level in range(1, max_level + 1):
                level_btn = Button(
                    text=f"Level {level}",
                    size_hint_y=None,
                    height=100,
                    background_color=(0.4, 0.7, 0.9, 1)  # Light blue
                )
                level_btn.bind(on_press=partial(self.select_level, level))
                self.level_grid.add_widget(level_btn)
            
            # Add locked level indicators
            for level in range(max_level + 1, max_level + 4):
                locked_btn = Button(
                    text=f"Level {level}\n(Locked)",
                    size_hint_y=None,
                    height=100,
                    background_color=(0.7, 0.7, 0.7, 0.5),  # Gray and transparent
                    disabled=True
                )
                self.level_grid.add_widget(locked_btn)
            
            # Set minimum height for grid
            self.level_grid.height = len(self.level_grid.children) * 110  # Height + spacing
    
    def select_level(self, level, instance):
        """Handle level selection"""
        self.selected_level = level
        
        # Update button visuals
        for child in self.level_grid.children:
            if child.text == f"Level {level}":
                child.background_color = (0.2, 0.5, 0.9, 1)  # Highlight selected
            elif not child.disabled:
                child.background_color = (0.4, 0.7, 0.9, 1)  # Reset others
    
    def start_game(self, instance):
        """Start the game with the selected level"""
        if self.selected_level:
            app = App.get_running_app()
            app.current_level = self.selected_level
            self.manager.transition = SlideTransition(direction="left")
            self.manager.current = "game"  # You'll need to create this screen
        else:
            # Show a popup or message to select a level first
            popup = Popup(
                title='Select a Level',
                content=Label(text='Please select a level first'),
                size_hint=(0.6, 0.3)
            )
            popup.open()
    
    def logout(self, instance):
        """Return to login screen"""
        app = App.get_running_app()
        app.current_user = None
        self.manager.transition = SlideTransition(direction="right")
        self.manager.current = "login"
        
class GameScreen(Screen):
    def __init__(self, **kwargs):
        super(GameScreen, self).__init__(**kwargs)
        self.layout = BoxLayout(orientation='vertical', padding=[20, 20, 20, 20], spacing=10)
        
        # Title with level info
        self.title = Label(
            text='Playing Level 1',
            font_size='24sp',
            size_hint=(1, 0.1),
            color=(0.2, 0.5, 0.9, 1)  # Blue
        )
        
        # Situation display
        self.situation_box = BoxLayout(orientation='vertical', size_hint=(1, 0.3), spacing=10)
        self.situation_label = Label(
            text='Situation:',
            font_size='18sp',
            size_hint=(1, 0.3),
            halign='left'
        )
        self.situation_label.bind(size=self.situation_label.setter('text_size'))
        
        self.situation_text = Label(
            text='',
            font_size='16sp',
            size_hint=(1, 0.7),
            text_size=(Window.width - 60, None),
            halign='left',
            valign='top',
            color=(0, 0, 0, 1)  # Black
        )
        
        self.situation_box.add_widget(self.situation_label)
        self.situation_box.add_widget(self.situation_text)
        
        # Options for cognitive distortions
        self.options_label = Label(
            text='Select the Cognitive Distortion:',
            font_size='18sp',
            size_hint=(1, 0.1),
            halign='left'
        )
        self.options_label.bind(size=self.options_label.setter('text_size'))
        
        # Scroll view for options
        self.scroll_view = ScrollView(size_hint=(1, 0.4))
        self.options_layout = GridLayout(cols=1, spacing=10, size_hint_y=None)
        self.options_layout.bind(minimum_height=self.options_layout.setter('height'))
        self.scroll_view.add_widget(self.options_layout)
        
        # Bottom navigation
        self.nav_layout = BoxLayout(orientation='horizontal', size_hint=(1, 0.1), spacing=10)
        
        self.back_btn = Button(
            text='Back to Levels',
            size_hint=(0.5, 1),
            background_color=(0.7, 0.7, 0.7, 1)  # Gray
        )
        self.back_btn.bind(on_press=self.go_back)
        
        self.submit_btn = Button(
            text='Submit Answer',
            size_hint=(0.5, 1),
            background_color=(0.2, 0.5, 0.9, 1)  # Blue
        )
        self.submit_btn.bind(on_press=self.check_answer)
        
        self.nav_layout.add_widget(self.back_btn)
        self.nav_layout.add_widget(self.submit_btn)
        
        # Add all layouts to main layout
        self.layout.add_widget(self.title)
        self.layout.add_widget(self.situation_box)
        self.layout.add_widget(self.options_label)
        self.layout.add_widget(self.scroll_view)
        self.layout.add_widget(self.nav_layout)
        
        # Add layout to screen
        self.add_widget(self.layout)
        
        # Set background color
        with self.canvas.before:
            Color(1, 1, 1, 1)  # White background
            self.rect = Rectangle(size=self.size, pos=self.pos)
        self.bind(size=self._update_rect, pos=self._update_rect)
        
        # Game state
        self.current_situation = None
        self.selected_distortion = None
        self.correct_distortion = None
    
    def _update_rect(self, instance, value):
        self.rect.size = instance.size
        self.rect.pos = instance.pos
    
    def on_enter(self):
        """Initialize the game for the current level"""
        app = App.get_running_app()
        level = getattr(app, 'current_level', 1)
        
        self.title.text = f"Playing Level {level}"
        self.selected_distortion = None
        
        # Generate a new situation
        try:
            situation_data = generate_situation_with_ai(level)
            self.current_situation = situation_data["situation"]
            self.correct_distortion = situation_data["distortion"]
        except:
            # Fallback to predefined examples
            self.current_situation = "I made a mistake at work. I'm an idiot."
            self.correct_distortion = "Labeling"
        
        self.situation_text.text = self.current_situation
        
        # Populate cognitive distortion options
        self.options_layout.clear_widgets()
        
        for distortion in COGNITIVE_DISTORTIONS:
            option_btn = Button(
                text=distortion,
                size_hint_y=None,
                height=60,
                background_color=(0.9, 0.9, 0.9, 1),  # Light gray
                halign='center'
            )
            option_btn.bind(on_press=partial(self.select_distortion, distortion))
            self.options_layout.add_widget(option_btn)
        
        # Set minimum height for options layout
        self.options_layout.height = len(COGNITIVE_DISTORTIONS) * 70  # Height + spacing
    
    def select_distortion(self, distortion, instance):
        """Handle distortion selection"""
        self.selected_distortion = distortion
        
        # Update button visuals
        for child in self.options_layout.children:
            if child.text == distortion:
                child.background_color = (0.2, 0.5, 0.9, 1)  # Highlight selected
            else:
                child.background_color = (0.9, 0.9, 0.9, 1)  # Reset others
    
    def check_answer(self, instance):
        """Check if the selected distortion is correct"""
        if not self.selected_distortion:
            # Show message to select an option first
            popup = Popup(
                title='Select an Option',
                content=Label(text='Please select a cognitive distortion'),
                size_hint=(0.6, 0.3)
            )
            popup.open()
            return
        
        app = App.get_running_app()
        level = getattr(app, 'current_level', 1)
        
        # Check if answer is correct
        is_correct = self.selected_distortion == self.correct_distortion
        
        # Show result popup
        if is_correct:
            # Update user level progress if this was their highest level
            user_data = load_user_data()
            if app.current_user in user_data["users"]:
                current_max = user_data["users"][app.current_user].get("level_progress", 1)
                if level == current_max:
                    user_data["users"][app.current_user]["level_progress"] = min(20, level + 1)
                    save_user_data(user_data)
            
            content = BoxLayout(orientation='vertical', padding=10)
            content.add_widget(Label(
                text='Correct! Good job identifying the cognitive distortion.',
                font_size='18sp'
            ))
            
            if level < 20:  # Max level check
                next_btn = Button(
                    text='Next Level',
                    size_hint=(1, None),
                    height=50
                )
                next_btn.bind(on_press=lambda x: self.go_to_next_level(popup))
                content.add_widget(next_btn)
            
            levels_btn = Button(
                text='Back to Levels',
                size_hint=(1, None),
                height=50
            )
            levels_btn.bind(on_press=lambda x: self.return_to_levels(popup))
            content.add_widget(levels_btn)
            
            popup = Popup(
                title='Correct!',
                content=content,
                size_hint=(0.8, 0.4),
                auto_dismiss=False
            )
        else:
            content = BoxLayout(orientation='vertical', padding=10)
            content.add_widget(Label(
                text=f'Not quite. This situation demonstrates: {self.correct_distortion}',
                font_size='18sp'
            ))
            
            try_again_btn = Button(
                text='Try Again',
                size_hint=(1, None),
                height=50
            )
            try_again_btn.bind(on_press=lambda x: popup.dismiss())
            content.add_widget(try_again_btn)
            
            levels_btn = Button(
                text='Back to Levels',
                size_hint=(1, None),
                height=50
            )
            levels_btn.bind(on_press=lambda x: self.return_to_levels(popup))
            content.add_widget(levels_btn)
            
            popup = Popup(
                title='Incorrect',
                content=content,
                size_hint=(0.8, 0.4),
                auto_dismiss=False
            )
        
        popup.open()
    
    def go_to_next_level(self, popup):
        """Advance to the next level"""
        popup.dismiss()
        app = App.get_running_app()
        app.current_level = getattr(app, 'current_level', 1) + 1
        self.on_enter()  # Refresh the screen with new level
    
    def return_to_levels(self, popup=None):
        """Return to level select screen"""
        if popup:
            popup.dismiss()
        self.manager.transition = SlideTransition(direction="right")
        self.manager.current = "level_select"
    
    def go_back(self, instance):
        """Return to level select screen"""
        self.return_to_levels()
        

# Add this at the top of your file after the imports
import traceback
import sys

class CognitiveDistortionGame(App):
    def __init__(self, **kwargs):
        super(CognitiveDistortionGame, self).__init__(**kwargs)
        self.current_user = None
        self.current_level = 1
    
    def build(self):
        # Create the screen manager
        sm = ScreenManager(transition=SlideTransition())
        
        # Add all screens
        sm.add_widget(LoginScreen(name='login'))
        sm.add_widget(AdminScreen(name='admin'))
        sm.add_widget(ProfileScreen(name='profile'))
        sm.add_widget(LevelSelectScreen(name='level_select'))
        sm.add_widget(GameScreen(name='game'))
        
        # Set the initial screen
        sm.current = 'login'
        
        return sm

if __name__ == "__main__":
    try:
        app = CognitiveDistortionGame()
        app.run()
    except Exception as e:
        print(f"Error: {e}")
        print(traceback.format_exc())
        # Keep the console open
        input("Press Enter to exit...")
        sys.exit(1)